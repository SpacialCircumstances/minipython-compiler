use crate::ast::{Ast, Program};
use crate::name::{InternedName, NameStore};
use crate::lexer::{Token, Location, LexerError};
use crate::lexer::Token::*;

grammar<'input>(input: &'input str, names: &mut NameStore);

extern {
    type Location = Location;
    type Error = LexerError;

    enum Token<'input> {
        "input" => Input,
        "output" => Output,
        "," => Comma,
        "indent" => Indent,
        "unindent" => Unindent,
        "return" => Return,
        "def" => Def,
        ":" => Colon,
        "name" => Name(<&'input str>),
        "(" => OpenParen,
        ")" => CloseParen,
        "while" => While,
        "!=0" => NotEqualZero,
        "+=1" => PlusEqualOne,
        "-=1" => MinusEqualOne,
        "=" => Equal
    }
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

pub Program: Program = <ins:Input> <outs:Output> <body:TopLevelBlock> => Program {
    inputs: ins,
    output: outs,
    body: body
};

pub TopLevelBlock: Vec<Ast> = TopLevelExpr*;

Input: Vec<InternedName> = "input" ":" <ArgList>;

Output: InternedName = "output" ":" <Name>;

TopLevelExpr: Ast = {
    Incr,
    Decr,
    While,
    Def,
    Assign
}

FunctionLevelExpr: Ast = {
    Incr,
    Decr,
    Return,
    While,
    Assign
};

Return: Ast = "return" <Name> => Ast::Return(<>);

Incr: Ast = <Name> "+=1" => Ast::Incr(<>);

Decr: Ast = <Name> "-=1" => Ast::Decr(<>);

While: Ast = "while" <n:Name> "!=0" ":" "indent" <p:FunctionLevelExpr+> "unindent" => Ast::While { cond_var: n, body: p };

Assign: Ast = <vname:Name> "=" <fname:Name> "(" <args:ArgList> ")" => Ast::Assign { var_name: vname, fun_name: fname, args: args };

Def: Ast = "def" <fname:Name> "(" <params:ArgList> ")" ":" "indent" <p:FunctionLevelExpr+> "unindent" => Ast::Def { name: fname, parameters: params, body: p };

ArgList: Vec<InternedName> = Comma<Name>;

Name: InternedName = "name" => names.register(<>);